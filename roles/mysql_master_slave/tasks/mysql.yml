- name: Install Linux system packages.
  yum:
    name: ["gcc", "libffi-devel", "python3-devel", "libcurl-devel", "zlib-devel", "readline-devel", "ncurses-devel", "wget", "telnet", "net-tools"]
    state: "{{ state }}"

- name: Disable Linux firewalld.
  service:
    name: firewalld
    state: stopped
    enabled: no

- name: Set SELinux to disabled mode.
  selinux:
    policy: targeted
    state: disabled

- name: Set SELinux to disabled mode in the config file.
  lineinfile:
    path: '/etc/selinux/config'
    state: '{{ state }}'
    regexp: '^SELINUX=(.*)?'
    line: 'SELINUX=disabled'

- name: Install MySQL YUM Repo Release.
  yum:
    name: 'http://repo.mysql.com/mysql80-community-release-el7.rpm'
    state: '{{ state }}'

- name: Enable MySQL Repo.
  command: "{{ item }}"
  args:
    warn: false
  with_items:
    - yum repolist enabled | grep "mysql.*-community.*"
    - sudo yum-config-manager --enable mysql80-community

- name: Install MySQL Packages.
  yum:
    name: ['mysql-community-server', 'mysql-workbench-community', 'mysql-community-devel', 'mysql-community-libs', 'mysql-community-common', 'mysql-community-client', 'MySQL-python', 'mysql-connector-odbc', 'mysql-connector-odbc-setup']
    state: '{{ state }}'

- name: Configure hostname.
  shell: >
    hostnamectl set-hostname "{{ ansible_hostname }}a.{{ ansible_domain }}" > hosta.log
  args:
    executable: /bin/bash
    creates: hosta.log
  when: inventory_hostname in groups['mysql_master']

- name: Configure hostname.
  shell: >
    hostnamectl set-hostname "{{ ansible_hostname }}b.{{ ansible_domain }}" > hostb.log
  args:
    executable: /bin/bash
    creates: hostb.log
  when: inventory_hostname in groups['mysql_slave']

- name: Fetching IP.
  local_action: "copy content='{{ ansible_all_ipv4_addresses[0] }}     {{ ansible_hostname }}.{{ ansible_domain }}' dest=file/hosta"
  when: inventory_hostname in groups['mysql_master']

- name: Fetching IP.
  local_action: "copy content='{{ ansible_all_ipv4_addresses[0] }}     {{ ansible_hostname }}.{{ ansible_domain }}' dest=file/hostb"
  when: inventory_hostname in groups['mysql_slave']

- name: Concatenate two files into one.
  assemble:
    src: file
    dest: myhost
    mode: "{{ fmode }}"
  delegate_to: localhost

- name: Deploy hosts file.
  copy:
    src: myhost
    dest: /etc/hosts
    owner: "{{ owner }}"
    group: "{{ group }}"
    mode: "{{ fmode }}"

- name: cleanup
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - myhost
    - file/hosta
    - file/hostb
  delegate_to: localhost

- name: Add port to my.cnf config.
  lineinfile:
    path: '/etc/my.cnf'
    state: '{{ state }}'
    line: 'port = 3306'
    create: yes

- name: Add MySQL bind-address to config file.
  lineinfile:
    path: '/etc/my.cnf'
    state: '{{ state }}'
    line: 'bind-address = 0.0.0.0'
    create: yes

- name: Update systemd.
  systemd:
    daemon_reload: yes

- name: Start mysqld service.
  service:
    name: mysqld
    state: started

- name: Deploy MySQL update password.
  template:
    src: "updatepass.sh.j2"
    dest: /tmp/updatepass.sh
    mode: "{{ dmode }}"

- name: Update MySQL root password.
  shell: >
    ./updatepass.sh > pass.log
  args:
    executable: /bin/bash
    chdir: /tmp
    creates: pass.log

- name: Create replicate user.
  mysql_user:
    login_user: admin
    login_password: 'Ad^m2nPassW0rd'
    name: replica
    host: "%"
    password: "S3cr3tP^SSw0rd"
    priv: "*.*:REPLICATION SLAVE,REPLICATION CLIENT"
    state: "{{ state }}"
  no_log: true

- name: Deploy the MySQL replication my.cnf config file.
  template:
    src: 'my.cnf.j2'
    dest: /etc/my.cnf
    owner: '{{ owner }}'
    group: '{{ group }}'
    mode: '{{ fmode }}'

- name: Update my.cnf server-id.
  lineinfile:
    path: '/etc/my.cnf'
    state: '{{ state }}'
    regexp: '^server-id(.*)?'
    line: 'server-id = 1'
  when: inventory_hostname in groups['mysql_master']

- name: Update my.cnf server-id.
  lineinfile:
    path: '/etc/my.cnf'
    state: '{{ state }}'
    regexp: '^server-id(.*)?'
    line: 'server-id = 2'
  when: inventory_hostname in groups['mysql_slave']

- name: Restart mysqld service daemon on Master node.
  service:
    name: mysqld
    state: restarted
  when: inventory_hostname in groups['mysql_master']

- name: Check Master status.
  mysql_replication:
    mode: getmaster
    login_user: admin
    login_password: 'Ad^m2nPassW0rd'
  register: mstatus
  when: inventory_hostname in groups['mysql_master']

- debug:
    msg: "{{ mstatus }} "
  when: inventory_hostname in groups['mysql_master']

- name: Restart mysql service daemon on slave node.
  service:
    name: mysqld
    state: restarted
  when: inventory_hostname in groups['mysql_slave']

- name: Stop slave thread.
  mysql_replication:
    mode: stopslave
    login_user: admin
    login_password: 'Ad^m2nPassW0rd'
  when: inventory_hostname in groups['mysql_slave']

- name: Get master IP.
  shell: >
    echo "{{ ansible_all_ipv4_addresses[0] }}"
  register: masterip
  args:
    executable: /bin/bash
  when: inventory_hostname in groups['mysql_master']

- name: insert ip address to file.
  lineinfile:
    path: "group_vars/all/all.yml"
    state: "{{ state }}"
    line: "ipaddress: \"{{ masterip.stdout }}\""
    create: yes
  delegate_to: localhost
  when: inventory_hostname in groups['mysql_master']

- name: Insert binary log output into a file.
  lineinfile:
    path: "group_vars/all/all.yml"
    state: "{{ state }}"
    line: "binlog: \"{{ mstatus.File }}\""
    create: yes
  delegate_to: localhost
  when: inventory_hostname in groups['mysql_master']

- name: Insert binary log position output into a file.
  lineinfile:
    path: "group_vars/all/all.yml"
    state: "{{ state }}"
    line: "logpos: \"{{ mstatus.Position }}\""
    create: yes
  delegate_to: localhost
  when: inventory_hostname in groups['mysql_master']

- pause:
    minutes: 1

- name: Setup replication on slave node.
  mysql_replication:
    login_user: admin
    login_password: 'Ad^m2nPassW0rd'
    mode: changemaster
    master_host: "{{ ipaddress }}"
    master_user: "replica"
    master_password: "S3cr3tP^SSw0rd"
    master_log_file: "{{ binlog }}"
    master_log_pos: "{{ logpos }}"
    master_connect_retry: 10
  when: inventory_hostname in groups['mysql_slave']

- name: Start slave.
  mysql_replication:
    login_user: admin
    login_password: 'Ad^m2nPassW0rd'
    mode: startslave
  when: inventory_hostname in groups['mysql_slave']
    
- name: Check slave status.
  mysql_replication:
    login_user: admin
    login_password: 'Ad^m2nPassW0rd'
    mode: getslave
  register: slavestatus
  when: inventory_hostname in groups['mysql_slave']

- debug:
    msg: "{{ slavestatus }}"
  when: inventory_hostname in groups['mysql_slave']

- name: delete existent ipaddress output in the variable.
  lineinfile:
    path: "group_vars/all/all.yml"
    state: absent
    regexp: '^ipaddress(.*)?'
    line: ''
  delegate_to: localhost

- name: delete existent binary log output in the variable.
  lineinfile:
    path: "group_vars/all/all.yml"
    state: absent
    regexp: '^binlog(.*)?'
    line: ''
  delegate_to: localhost

- name: delete existent binary log position output in the variable.
  lineinfile:
    path: "group_vars/all/all.yml"
    state: absent
    regexp: '^logpos(.*)?'
    line: ''
  delegate_to: localhost