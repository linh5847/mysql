- name: Install Linux system packages.
  yum:
    name: ["gcc", "libffi-devel", "python3-devel", "libcurl-devel", "zlib-devel", "readline-devel", "ncurses-devel", "wget", "telnet", "net-tools"]
    state: "{{ state }}"

- name: Disable Linux firewalld.
  service:
    name: firewalld
    state: stopped
    enabled: no

- name: Set SELinux to disabled mode.
  selinux:
    policy: targeted
    state: disabled

- name: Set SELinux to disabled mode in the config file.
  lineinfile:
    path: '/etc/selinux/config'
    state: '{{ state }}'
    regexp: '^SELINUX=(.*)?'
    line: 'SELINUX=disabled'

- name: Install MySQL YUM Repo Release.
  yum:
    name: 'http://repo.mysql.com/mysql80-community-release-el7.rpm'
    state: '{{ state }}'

- name: Enable MySQL Repo.
  command: "{{ item }}"
  args:
    warn: false
  with_items:
    - yum repolist enabled | grep "mysql.*-community.*"
    - sudo yum-config-manager --enable mysql80-community

- name: Install MySQL Packages.
  yum:
    name: ['mysql-community-server', 'mysql-workbench-community', 'mysql-community-devel', 'mysql-community-libs', 'mysql-community-common', 'mysql-community-client', 'MySQL-python', 'mysql-connector-odbc', 'mysql-connector-odbc-setup']
    state: '{{ state }}'

- name: Configure hostname.
  shell: >
    hostnamectl set-hostname "{{ ansible_hostname }}a.{{ ansible_domain }}" > hosta.log
  args:
    executable: /bin/bash
    creates: hosta.log
  when: inventory_hostname in groups['mysql_master']

- name: Configure hostname.
  shell: >
    hostnamectl set-hostname "{{ ansible_hostname }}b.{{ ansible_domain }}" > hostb.log
  args:
    executable: /bin/bash
    creates: hostb.log
  when: inventory_hostname in groups['mysql_slave']

- name: Fetching IP.
  local_action: "copy content='{{ ansible_all_ipv4_addresses[1] }}     {{ ansible_hostname }}.{{ ansible_domain }}' dest=file/hosta"
  when: inventory_hostname in groups['mysql_master']

- name: Fetching IP.
  local_action: "copy content='{{ ansible_all_ipv4_addresses[1] }}     {{ ansible_hostname }}.{{ ansible_domain }}' dest=file/hostb"
  when: inventory_hostname in groups['mysql_slave']

- name: Concatenate two files into one.
  assemble:
    src: file
    dest: myhost
  delegate_to: localhost

- name: Deploy hosts file.
  copy:
    src: myhost
    dest: /etc/hosts
    owner: "{{ owner }}"
    group: "{{ group }}"
    mode: "{{ fmode }}"

- name: Update my.cnf config.
  lineinfile:
    path: '/etc/my.cnf'
    state: '{{ state }}'
    line: 'skip-grant-tables'
    create: yes

- name: Startup mysqld service daemon.
  service:
    name: mysqld
    state: started
    enabled: yes

- name: Add mysql admin user.
  mysql_user:
    name: admin
    host: "%"
    password: "Admin123456"
    priv: "*.*:ALL,GRANT"
    state: "{{ state }}"

- name: Create replicate user.
  mysql_user:
    name: replica
    host: "%"
    password: "S3cr3tPaSSw0rd"
    priv: "*.*:REPLICATION SLAVE"
    state: "{{ state }}"

- name: Deploy the MySQL replication my.cnf config file.
  template:
    src: 'my.cnf.j2'
    dest: /etc/my.cnf
    owner: '{{ owner }}'
    group: '{{ group }}'
    mode: '{{ fmode }}'

- name: Update my.cnf server-id.
  lineinfile:
    path: '/etc/my.cnf'
    state: '{{ state }}'
    regexp: '^server-id(.*)?'
    line: 'server-id = 1'
  when: inventory_hostname in groups['mysql_master']

- name: Update my.cnf server-id.
  lineinfile:
    path: '/etc/my.cnf'
    state: '{{ state }}'
    regexp: '^server-id(.*)?'
    line: 'server-id = 2'
  when: inventory_hostname in groups['mysql_slave']

- name: Restart mysqld service daemon on Master node.
  service:
    name: mysqld
    state: restarted
  when: inventory_hostname in groups['mysql_master']

- name: Reset master.
  shell: >
    /usr/bin/mysql -u root -e "RESET MASTER" > master_cluster_reset.log
  args:
    executable: /bin/bash
    creates: master_cluster_reset.log
  when: inventory_hostname in groups['mysql_master']

- name: Check Master status.
  mysql_replication:
    mode: getmaster
  register: mstatus
  when: inventory_hostname in groups['mysql_master']

- debug:
    msg: "{{ mstatus }}"
  when: inventory_hostname in groups['mysql_master']

- name: Restart mysql service daemon on slave node.
  service:
    name: mysqld
    state: restarted
  when: inventory_hostname in groups['mysql_slave']

- name: Stop slave thread.
  mysql_replication:
    mode: stopslave
  when: inventory_hostname in groups['mysql_slave']

- name: Get master IP.
  shell: >
    echo "{{ ansible_all_ipv4_addresses[1] }}" > masterip.log
  register: masterip
  args:
    executable: /bin/bash
    creates: masterip.log
  when: inventory_hostname in groups['mysql_master']

- debug:
    msg: "{{ masterip.stdout }}"
  when: inventory_hostname in groups['mysql_master']

#- name: Setup replication on slave node.
#  mysql_replication:
#    mode: changemaster
#    master_host: "{{ masterip.stdout }}"
#    master_user: "replica"
#    master_password: "S3cr3tPaSSw0rd"
#    master_log_file: "{{ mstatus.stdout_lines[1] }}"
#    master_log_pos: "{{ mstatus.stdout_lines[2] }}"
#  when: inventory_hostname in groups['mysql_slave']
#
#- name: Check slave status.
#  mysql_replication:
#    mode: getslave
#    login_host: "{{ ansible_fqdn }}"
#    login_port: 3308
#  when: inventory_hostname in groups['mysql_slave']

- name: cleanup
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - myhost
    - file/hosta
    - file/hostb
  delegate_to: localhost